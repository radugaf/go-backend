// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: bank_account.sql

package db

import (
	"context"
)

const addBankAccountBalance = `-- name: AddBankAccountBalance :one
UPDATE bank_accounts SET balance = balance + $1 WHERE id = $2 RETURNING id, owner, balance, currency, created_at
`

type AddBankAccountBalanceParams struct {
	Amount int64 `json:"amount"`
	ID     int64 `json:"id"`
}

func (q *Queries) AddBankAccountBalance(ctx context.Context, arg AddBankAccountBalanceParams) (BankAccount, error) {
	row := q.queryRow(ctx, q.addBankAccountBalanceStmt, addBankAccountBalance, arg.Amount, arg.ID)
	var i BankAccount
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const createBankAccount = `-- name: CreateBankAccount :one
INSERT INTO bank_accounts (owner, balance, currency) VALUES ($1, $2, $3) RETURNING id, owner, balance, currency, created_at
`

type CreateBankAccountParams struct {
	Owner    string `json:"owner"`
	Balance  int64  `json:"balance"`
	Currency string `json:"currency"`
}

func (q *Queries) CreateBankAccount(ctx context.Context, arg CreateBankAccountParams) (BankAccount, error) {
	row := q.queryRow(ctx, q.createBankAccountStmt, createBankAccount, arg.Owner, arg.Balance, arg.Currency)
	var i BankAccount
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const deleteBankAccount = `-- name: DeleteBankAccount :exec
DELETE FROM bank_accounts WHERE id = $1
`

func (q *Queries) DeleteBankAccount(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteBankAccountStmt, deleteBankAccount, id)
	return err
}

const getBankAccount = `-- name: GetBankAccount :one
SELECT id, owner, balance, currency, created_at FROM bank_accounts WHERE id = $1 LIMIT 1
`

func (q *Queries) GetBankAccount(ctx context.Context, id int64) (BankAccount, error) {
	row := q.queryRow(ctx, q.getBankAccountStmt, getBankAccount, id)
	var i BankAccount
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const getBankAccountForUpdate = `-- name: GetBankAccountForUpdate :one
SELECT id, owner, balance, currency, created_at FROM bank_accounts WHERE id = $1 LIMIT 1 FOR NO KEY UPDATE
`

func (q *Queries) GetBankAccountForUpdate(ctx context.Context, id int64) (BankAccount, error) {
	row := q.queryRow(ctx, q.getBankAccountForUpdateStmt, getBankAccountForUpdate, id)
	var i BankAccount
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const listBankAccounts = `-- name: ListBankAccounts :many
SELECT id, owner, balance, currency, created_at FROM bank_accounts WHERE owner = $1 ORDER BY id LIMIT $2 OFFSET $3
`

type ListBankAccountsParams struct {
	Owner  string `json:"owner"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) ListBankAccounts(ctx context.Context, arg ListBankAccountsParams) ([]BankAccount, error) {
	rows, err := q.query(ctx, q.listBankAccountsStmt, listBankAccounts, arg.Owner, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []BankAccount{}
	for rows.Next() {
		var i BankAccount
		if err := rows.Scan(
			&i.ID,
			&i.Owner,
			&i.Balance,
			&i.Currency,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBankAccount = `-- name: UpdateBankAccount :one
UPDATE bank_accounts SET balance = $2 WHERE id = $1 RETURNING id, owner, balance, currency, created_at
`

type UpdateBankAccountParams struct {
	ID      int64 `json:"id"`
	Balance int64 `json:"balance"`
}

func (q *Queries) UpdateBankAccount(ctx context.Context, arg UpdateBankAccountParams) (BankAccount, error) {
	row := q.queryRow(ctx, q.updateBankAccountStmt, updateBankAccount, arg.ID, arg.Balance)
	var i BankAccount
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}
