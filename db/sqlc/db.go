// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.addBankAccountBalanceStmt, err = db.PrepareContext(ctx, addBankAccountBalance); err != nil {
		return nil, fmt.Errorf("error preparing query AddBankAccountBalance: %w", err)
	}
	if q.createBankAccountStmt, err = db.PrepareContext(ctx, createBankAccount); err != nil {
		return nil, fmt.Errorf("error preparing query CreateBankAccount: %w", err)
	}
	if q.createEntryStmt, err = db.PrepareContext(ctx, createEntry); err != nil {
		return nil, fmt.Errorf("error preparing query CreateEntry: %w", err)
	}
	if q.createSessionStmt, err = db.PrepareContext(ctx, createSession); err != nil {
		return nil, fmt.Errorf("error preparing query CreateSession: %w", err)
	}
	if q.createTransferStmt, err = db.PrepareContext(ctx, createTransfer); err != nil {
		return nil, fmt.Errorf("error preparing query CreateTransfer: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.deleteBankAccountStmt, err = db.PrepareContext(ctx, deleteBankAccount); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteBankAccount: %w", err)
	}
	if q.getBankAccountStmt, err = db.PrepareContext(ctx, getBankAccount); err != nil {
		return nil, fmt.Errorf("error preparing query GetBankAccount: %w", err)
	}
	if q.getBankAccountForUpdateStmt, err = db.PrepareContext(ctx, getBankAccountForUpdate); err != nil {
		return nil, fmt.Errorf("error preparing query GetBankAccountForUpdate: %w", err)
	}
	if q.getEntryStmt, err = db.PrepareContext(ctx, getEntry); err != nil {
		return nil, fmt.Errorf("error preparing query GetEntry: %w", err)
	}
	if q.getSessionStmt, err = db.PrepareContext(ctx, getSession); err != nil {
		return nil, fmt.Errorf("error preparing query GetSession: %w", err)
	}
	if q.getTransferStmt, err = db.PrepareContext(ctx, getTransfer); err != nil {
		return nil, fmt.Errorf("error preparing query GetTransfer: %w", err)
	}
	if q.getUserStmt, err = db.PrepareContext(ctx, getUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetUser: %w", err)
	}
	if q.listBankAccountsStmt, err = db.PrepareContext(ctx, listBankAccounts); err != nil {
		return nil, fmt.Errorf("error preparing query ListBankAccounts: %w", err)
	}
	if q.listEntriesStmt, err = db.PrepareContext(ctx, listEntries); err != nil {
		return nil, fmt.Errorf("error preparing query ListEntries: %w", err)
	}
	if q.listTransfersStmt, err = db.PrepareContext(ctx, listTransfers); err != nil {
		return nil, fmt.Errorf("error preparing query ListTransfers: %w", err)
	}
	if q.updateBankAccountStmt, err = db.PrepareContext(ctx, updateBankAccount); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateBankAccount: %w", err)
	}
	if q.updateUserStmt, err = db.PrepareContext(ctx, updateUser); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUser: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.addBankAccountBalanceStmt != nil {
		if cerr := q.addBankAccountBalanceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addBankAccountBalanceStmt: %w", cerr)
		}
	}
	if q.createBankAccountStmt != nil {
		if cerr := q.createBankAccountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createBankAccountStmt: %w", cerr)
		}
	}
	if q.createEntryStmt != nil {
		if cerr := q.createEntryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createEntryStmt: %w", cerr)
		}
	}
	if q.createSessionStmt != nil {
		if cerr := q.createSessionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createSessionStmt: %w", cerr)
		}
	}
	if q.createTransferStmt != nil {
		if cerr := q.createTransferStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTransferStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.deleteBankAccountStmt != nil {
		if cerr := q.deleteBankAccountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteBankAccountStmt: %w", cerr)
		}
	}
	if q.getBankAccountStmt != nil {
		if cerr := q.getBankAccountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getBankAccountStmt: %w", cerr)
		}
	}
	if q.getBankAccountForUpdateStmt != nil {
		if cerr := q.getBankAccountForUpdateStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getBankAccountForUpdateStmt: %w", cerr)
		}
	}
	if q.getEntryStmt != nil {
		if cerr := q.getEntryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getEntryStmt: %w", cerr)
		}
	}
	if q.getSessionStmt != nil {
		if cerr := q.getSessionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSessionStmt: %w", cerr)
		}
	}
	if q.getTransferStmt != nil {
		if cerr := q.getTransferStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTransferStmt: %w", cerr)
		}
	}
	if q.getUserStmt != nil {
		if cerr := q.getUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserStmt: %w", cerr)
		}
	}
	if q.listBankAccountsStmt != nil {
		if cerr := q.listBankAccountsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listBankAccountsStmt: %w", cerr)
		}
	}
	if q.listEntriesStmt != nil {
		if cerr := q.listEntriesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listEntriesStmt: %w", cerr)
		}
	}
	if q.listTransfersStmt != nil {
		if cerr := q.listTransfersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listTransfersStmt: %w", cerr)
		}
	}
	if q.updateBankAccountStmt != nil {
		if cerr := q.updateBankAccountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateBankAccountStmt: %w", cerr)
		}
	}
	if q.updateUserStmt != nil {
		if cerr := q.updateUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                          DBTX
	tx                          *sql.Tx
	addBankAccountBalanceStmt   *sql.Stmt
	createBankAccountStmt       *sql.Stmt
	createEntryStmt             *sql.Stmt
	createSessionStmt           *sql.Stmt
	createTransferStmt          *sql.Stmt
	createUserStmt              *sql.Stmt
	deleteBankAccountStmt       *sql.Stmt
	getBankAccountStmt          *sql.Stmt
	getBankAccountForUpdateStmt *sql.Stmt
	getEntryStmt                *sql.Stmt
	getSessionStmt              *sql.Stmt
	getTransferStmt             *sql.Stmt
	getUserStmt                 *sql.Stmt
	listBankAccountsStmt        *sql.Stmt
	listEntriesStmt             *sql.Stmt
	listTransfersStmt           *sql.Stmt
	updateBankAccountStmt       *sql.Stmt
	updateUserStmt              *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                          tx,
		tx:                          tx,
		addBankAccountBalanceStmt:   q.addBankAccountBalanceStmt,
		createBankAccountStmt:       q.createBankAccountStmt,
		createEntryStmt:             q.createEntryStmt,
		createSessionStmt:           q.createSessionStmt,
		createTransferStmt:          q.createTransferStmt,
		createUserStmt:              q.createUserStmt,
		deleteBankAccountStmt:       q.deleteBankAccountStmt,
		getBankAccountStmt:          q.getBankAccountStmt,
		getBankAccountForUpdateStmt: q.getBankAccountForUpdateStmt,
		getEntryStmt:                q.getEntryStmt,
		getSessionStmt:              q.getSessionStmt,
		getTransferStmt:             q.getTransferStmt,
		getUserStmt:                 q.getUserStmt,
		listBankAccountsStmt:        q.listBankAccountsStmt,
		listEntriesStmt:             q.listEntriesStmt,
		listTransfersStmt:           q.listTransfersStmt,
		updateBankAccountStmt:       q.updateBankAccountStmt,
		updateUserStmt:              q.updateUserStmt,
	}
}
